<?xml version="1.0"?>
<doc>
<assembly>
<name>
Aaron.Xaml
</name>
</assembly>
<members>
<member name="T:Aaron.Xaml.DocSuperWalker">
 <summary>
 Dynamic cache class for report paginator
 </summary>
</member>
<member name="P:Aaron.Xaml.DocSuperWalker.FlowDocument">
 <summary>
 Gets the associacted flow document
 </summary>
</member>
<member name="M:Aaron.Xaml.DocSuperWalker.#ctor(System.Windows.Documents.FlowDocument)">
 <summary>
 Constructor
 </summary>
 <param name="flowDocument">flow document</param>
</member>
<member name="M:Aaron.Xaml.DocSuperWalker.GetFlowDocumentVisualListByType(System.Type)">
 <summary>
 Gets an ArrayList of all document visual object of a specific type
 </summary>
 <param name="type">type of document visual object</param>
 <returns>empty ArrayList, if type does not exist</returns>
</member>
<member name="T:Aaron.Xaml.DocWalker.DocumentVisitedEventHandler">
 <summary>
 THe delegate type of the event that will be raised
 </summary>
</member>
<member name="M:Aaron.Xaml.DocWalker.Walk(System.Windows.Documents.FlowDocument,Aaron.Xaml.DocWalker.DocumentVisitedEventHandler)">
 <summary>
 Traverses whole document
 </summary>
 <param name="fd">FlowDocument</param>
 <returns>list of inlines</returns>
</member>
<member name="M:Aaron.Xaml.DocWalker.Walk``1(System.Windows.Documents.FlowDocument,Aaron.Xaml.DocWalker.DocumentVisitedEventHandler)">
 <summary>
 Traverses whole document
 </summary>
 <param name="fd">FlowDocument</param>
 <returns>list of inlines</returns>
</member>
<member name="M:Aaron.Xaml.DocWalker.TraverseInlines``1(System.Windows.Documents.InlineCollection,Aaron.Xaml.DocWalker.DocumentVisitedEventHandler)">
 <summary>
 Traverses an InlineCollection
 </summary>
 <param name="inlines">InlineCollection to be traversed</param>
 <returns>list of inlines</returns>
</member>
<member name="M:Aaron.Xaml.DocWalker.TraverseParagraph``1(System.Windows.Documents.Paragraph,Aaron.Xaml.DocWalker.DocumentVisitedEventHandler)">
 <summary>
 Traverses only passed paragraph
 </summary>
 <param name="p">paragraph</param>
 <returns>list of inlines</returns>
</member>
<member name="M:Aaron.Xaml.DocWalker.TraverseBlockCollection_1``1(System.Collections.Generic.IEnumerable{System.Windows.Documents.Block},Aaron.Xaml.DocWalker.DocumentVisitedEventHandler)">
 <summary>
 Traverses passed block collection
 </summary>
 <param name="blocks">blocks to be traversed</param>
 <returns>list of inlines</returns>
    
</member>
<member name="M:Aaron.Xaml.DocWalker.TraverseBlockCollection``1(System.Collections.Generic.IEnumerable{System.Windows.Documents.Block},Aaron.Xaml.DocWalker.DocumentVisitedEventHandler)">
 <summary>
 Traverses passed block collection
 </summary>
 <param name="blocks">blocks to be traversed</param>
 <returns>list of inlines</returns>
    
</member>
<member name="T:Aaron.Xaml.SectionReportHeader">
 <summary>
 Section representing the report header
 </summary>
</member>
<member name="P:Aaron.Xaml.SectionReportHeader.PageHeaderHeight">
 <summary>
 Gets or sets the page header height in percent
 </summary>
</member>
<member name="T:Aaron.Xaml.SectionReportFooter">
 <summary>
 Section representing the report footer
 </summary>
</member>
<member name="P:Aaron.Xaml.SectionReportFooter.PageFooterHeight">
 <summary>
 Gets or sets the page footer height in percent
 </summary>
</member>
<member name="T:Aaron.Xaml.IChart1">
 <summary>
 Interface for a chart object
 </summary>
</member>
<member name="P:Aaron.Xaml.IChart1.TableColumns">
 <summary>
 Gets or sets the table columns which are used to draw the chart
 </summary>
</member>
<member name="P:Aaron.Xaml.IChart1.TableName">
 <summary>
 Gets or sets the table name containing the data to be drawn
 </summary>
</member>
<member name="P:Aaron.Xaml.IChart1.DataColumns">
 <summary>
 Gets or sets the data columns which are used to draw the chart
 </summary>
</member>
<member name="P:Aaron.Xaml.IChart1.DataView">
 <summary>
 Data view to be used to draw the data
 </summary>
</member>
<member name="M:Aaron.Xaml.IChart1.UpdateChart">
 <summary>
 Updates the chart to use the chart data
 </summary>
</member>
<member name="T:Aaron.Xaml.InlineHasValue1">
 <summary>
 Abstract class for fillable run values
 </summary>
</member>
<member name="P:Aaron.Xaml.InlineHasValue1.Format">
 <summary>
 Gets or sets the value format
 </summary>
</member>
<member name="P:Aaron.Xaml.InlineHasValue1.Value">
 <summary>
 Gets or sets the object value
 </summary>
</member>
<member name="F:Aaron.Xaml.InlineHasValue1.ValueChangedEvent">
 <summary>
 Identifies the ValueChanged routed event.
 </summary>
</member>
<member name="M:Aaron.Xaml.InlineHasValue1.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Decimal})">
 <summary>
 Raises the ValueChanged event.
 </summary>
 <param name="args">Arguments associated with the ValueChanged event.</param>
</member>
<member name="M:Aaron.Xaml.InlineHasValue1.FormatValue(System.Object,System.String)">
 <summary>
 Formats a value for output
 </summary>
 <param name="value">value</param>
 <param name="format">format</param>
 <returns></returns>
</member>
<member name="T:Aaron.Xaml.InlineContextValue">
 <summary>
 Contains a single report context value that is to be displayed on the report
 </summary>
</member>
<member name="P:Aaron.Xaml.InlineContextValue.Format">
 <summary>
 Gets or sets the value format
 </summary>
</member>
<member name="P:Aaron.Xaml.InlineContextValue.PropertyName">
 <summary>
 Gets or sets the property name
 </summary>
</member>
<member name="P:Aaron.Xaml.InlineContextValue.Value">
 <summary>
 Gets or sets the object value
 </summary>
</member>
<member name="M:Aaron.Xaml.InlineContextValue.FormatValue(System.Object,System.String)">
 <summary>
 Formats a value for output
 </summary>
 <param name="value">value</param>
 <param name="format">format</param>
 <returns></returns>
</member>
<member name="M:Aaron.Xaml.InlineContextValue.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Decimal})">
 <summary>
 Raises the ValueChanged event.
 </summary>
 <param name="args">Arguments associated with the ValueChanged event.</param>
</member>
<member name="T:Aaron.Xaml.InlineDocumentValue">
 <summary>
 Contains a single report value that is to be displayed on the report (e.g. report title)
 </summary>
</member>
<member name="P:Aaron.Xaml.InlineDocumentValue.Format">
 <summary>
 Gets or sets the value format
 </summary>
</member>
<member name="P:Aaron.Xaml.InlineDocumentValue.Value">
 <summary>
 Gets or sets the object value
 </summary>
</member>
<member name="F:Aaron.Xaml.InlineDocumentValue.ValueChangedEvent">
 <summary>
 Identifies the ValueChanged routed event.
 </summary>
</member>
<member name="M:Aaron.Xaml.InlineDocumentValue.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Decimal})">
 <summary>
 Raises the ValueChanged event.
 </summary>
 <param name="args">Arguments associated with the ValueChanged event.</param>
</member>
<member name="M:Aaron.Xaml.InlineDocumentValue.FormatValue(System.Object,System.String)">
 <summary>
 Formats a value for output
 </summary>
 <param name="value">value</param>
 <param name="format">format</param>
 <returns></returns>
</member>
<member name="P:Aaron.Xaml.InlineDocumentValue.PropertyName">
 <summary>
 Gets or sets the property name
 </summary>
</member>
<member name="M:Aaron.Xaml.Mod_Helpers.AddFontResourceToFixedPage(System.Windows.Xps.Packaging.IXpsFixedPageWriter,System.String)">
 <summary>
 Add the Font Resource to the Fixed Page
 </summary>
 <param name="pageWriter">The IXpsFixedPageWriter object to 'add' the Font Resource too</param>
 <param name="fontFileName">Full path the font resource being used</param>
 <returns>The fonrURI (as a string) of the Font resource</returns>
</member>
<member name="T:Aaron.Xaml.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Aaron.Xaml.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Aaron.Xaml.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:Aaron.Xaml.ReportDocument">
 <summary>
 Contains a complete report template without data
 </summary>
</member>
<member name="P:Aaron.Xaml.ReportDocument.ReportDate">
 <summary>
 The Default Date associated with the Report
 </summary>
 <value></value>
 <remarks>
 <see cref="F:Aaron.Xaml.ReportContextValues.Types.ReportDate"/>
 </remarks>
</member>
<member name="P:Aaron.Xaml.ReportDocument.DocumentValues">
 <summary>
 Gets a list of document values
 </summary>
</member>
<member name="P:Aaron.Xaml.ReportDocument.ShowUnknownValues">
 <summary>
 Shows all unknown values on the page
 </summary>
</member>
<member name="P:Aaron.Xaml.ReportDocument.PageHeight">
 <summary>
 Gets the original page height of the FlowDocument
 </summary>
</member>
<member name="P:Aaron.Xaml.ReportDocument.PageWidth">
 <summary>
 Gets the original page width of the FlowDocument
 </summary>
</member>
<member name="P:Aaron.Xaml.ReportDocument.ReportName">
 <summary>
 Gets or sets the optional report name
 </summary>
</member>
<member name="P:Aaron.Xaml.ReportDocument.ReportTitle">
 <summary>
 Gets or sets the optional report title.
 </summary>
 <remarks>
 XAML to use: {xrd:InlineContextValue Format="D" PropertyName="ReportTitle" />}
 </remarks>
</member>
<member name="P:Aaron.Xaml.ReportDocument.XamlData">
 <summary>
 XAML report data
 </summary>
</member>
<member name="M:Aaron.Xaml.ReportDocument.CreateXpsDocument">
 <summary>
 Helper method to create page header or footer from flow document template
 </summary>
 <returns></returns>
</member>
<member name="M:Aaron.Xaml.ReportDocument.CreateFlowDocument">
 <summary>
 Creates a flow document of the report data
 </summary>
 <returns></returns>
 <exception cref="T:System.ArgumentException">Flow document must have a specified page height</exception>
 <exception cref="T:System.ArgumentException">Flow document must have a specified page width</exception>
 <exception cref="T:System.ArgumentException">"Flow document must have only one ReportProperties section, but it has {0}"</exception>
</member>
<member name="M:Aaron.Xaml.ReportDocument.AsStream(System.Int32,System.Single)">
 <summary>
 
 </summary>
 <param name="Quality"></param>
 <returns></returns>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="M:Aaron.Xaml.ReportDocument.AsPDF(System.Single)">
 <summary>
 
 </summary>
 <param name="Quality"></param>
 <returns>The Full Name of the PDF File</returns>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="M:Aaron.Xaml.ReportDocument.Print(System.Boolean)">
 <summary>
 
 </summary>
 <param name="Hidden"></param>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="F:Aaron.Xaml.ReportPaginator._paginator">
 <summary>
 Reference to a original flowdoc paginator
 </summary>
</member>
<member name="P:Aaron.Xaml.ReportPaginator.IsPageCountValid">
 <summary>
 Determines if the current page count is valid
 </summary>
</member>
<member name="P:Aaron.Xaml.ReportPaginator.PageCount">
 <summary>
 Gets the total page count
 </summary>
</member>
<member name="P:Aaron.Xaml.ReportPaginator.PageSize">
 <summary>
 Gets or sets the page size
 </summary>
</member>
<member name="P:Aaron.Xaml.ReportPaginator.Source">
 <summary>
 Gets the paginator source
 </summary>
</member>
<member name="M:Aaron.Xaml.ReportPaginator.#ctor(Aaron.Xaml.ReportDocument)">
 <summary>
 Constructor
 </summary>
 <param name="report">report document</param>
 <exception cref="T:System.ArgumentException">Flow document must have a specified page height</exception>
 <exception cref="T:System.ArgumentException">Flow document must have a specified page width</exception>
 <exception cref="T:System.ArgumentException">Flow document can have only one report header section</exception>
 <exception cref="T:System.ArgumentException">Flow document can have only one report footer section</exception>
</member>
<member name="M:Aaron.Xaml.ReportPaginator.FillData">
 <summary>
 Fills document with data
 </summary>
</member>
<member name="M:Aaron.Xaml.ReportPaginator.FillContextValues(System.Collections.ArrayList,System.Int32)">
 <summary>
 Fills in Context Vales
 </summary>
 <param name="list"></param>
 <param name="pageNumber"></param>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="M:Aaron.Xaml.ReportPaginator.GetPage(System.Int32)">
 <summary>
 This is most important method, modifies the original 
 </summary>
 <param name="pageNumber">page number</param>
 <returns></returns>
</member>
<member name="T:Aaron.Xaml.ReportContextValues">
 <summary>
 
 </summary>
 <remarks></remarks>
 <features></features>
 <stepthrough></stepthrough>
</member>
<member name="T:Aaron.Xaml.ReportContextValues.Types">
 <summary>
 Enumeration of all available context value types
 </summary>
</member>
<member name="F:Aaron.Xaml.ReportContextValues.Types.PageNumber">
 <summary>
 Current page number
 </summary>
</member>
<member name="F:Aaron.Xaml.ReportContextValues.Types.PageCount">
 <summary>
 Total page count
 </summary>
</member>
<member name="F:Aaron.Xaml.ReportContextValues.Types.ReportName">
 <summary>
 Report name
 </summary>
</member>
<member name="F:Aaron.Xaml.ReportContextValues.Types.ReportTitle">
 <summary>
 Report title
 </summary>
</member>
<member name="F:Aaron.Xaml.ReportContextValues.Types.ReportDate">
 <summary>
 The Default Date associated with the Report
 </summary>
</member>
<member name="M:Aaron.Xaml.ReportContextValues.#cctor">
 <summary>
 Static constructor
 </summary>
</member>
<member name="M:Aaron.Xaml.ReportContextValues.GetReportContextValueTypeByName(System.String)">
 <summary>
 Gets a report context value type by name
 </summary>
 <param name="name">name of report context value</param>
 <returns>null, if it does not exist</returns>
</member>
<member name="T:Aaron.Xaml.ReportToPDF">
 <summary>
 Leave this Class here for now and just See where the Best place to put code is
 </summary>
 <remarks></remarks>
 <features></features>
 <stepthrough></stepthrough>
</member>
<member name="M:Aaron.Xaml.ReportToPDF.AddImage(System.Boolean,System.IO.MemoryStream,iTextSharp.text.Document@,iTextSharp.text.pdf.PdfWriter)">
 <summary>
 
 </summary>
 <param name="Resize"></param>
 <param name="Image"></param>
 <param name="oPdfDoc"></param>
 <param name="oPdfWriter"></param>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="T:Aaron.Xaml.XamlHelper1">
 <summary>
 Helper class for XAML
 </summary>
</member>
<member name="M:Aaron.Xaml.XamlHelper1.LoadXamlFromString(System.String)">
 <summary>
 Loads a XAML object from string
 </summary>
 <param name="s">string containing the XAML object</param>
 <returns>XAML object or null, if string was empty</returns>
</member>
<member name="M:Aaron.Xaml.XamlHelper1.CloneTableRow(System.Windows.Documents.TableRow)">
 <summary>
 Clones a table row
 </summary>
 <param name="orig">original table row</param>
 <returns>cloned table row</returns>
</member>
<member name="M:Aaron.Xaml.XamlHelper1.CloneBlock(System.Windows.Documents.Block)">
 <summary>
 Clones a complete block
 </summary>
 <param name="orig">orininal block</param>
 <returns>cloned block</returns>
</member>
<member name="M:Aaron.Xaml.XamlHelper1.CloneUIElement(System.Windows.UIElement)">
 <summary>
 Clones a complete UIElement
 </summary>
 <param name="orig">original UIElement</param>
 <returns>cloned UIElement</returns>
</member>
<member name="M:Aaron.Xaml.XamlHelper1.SaveImageBmp(System.Windows.Media.Visual,System.IO.Stream,System.Int32,System.Int32,System.Double,System.Double)">
 <summary>
 Saves a visual to bitmap into stream
 </summary>
 <param name="visual">visual</param>
 <param name="stream">stream</param>
 <param name="width">width</param>
 <param name="height">height</param>
 <param name="dpiX">X DPI resolution</param>
 <param name="dpiY">Y DPI resolution</param>
</member>
<member name="M:Aaron.Xaml.XamlHelper1.SaveImagePng(System.Windows.Media.Visual,System.IO.Stream,System.Int32,System.Int32,System.Double,System.Double)">
 <summary>
 Saves a visual to PNG into stream
 </summary>
 <param name="visual">visual</param>
 <param name="stream">stream</param>
 <param name="width">width</param>
 <param name="height">height</param>
 <param name="dpiX">X DPI resolution</param>
 <param name="dpiY">Y DPI resolution</param>
</member>
</members>
</doc>
